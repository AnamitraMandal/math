[/
  Copyright 2018 Nick Thompson

  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:signal_statistics Signal Statistics]

[heading Synopsis]

``
#include <boost/math/tools/signal_statistics.hpp>

namespace boost{ namespace math{ namespace tools {

    template<class Container>
    auto absolute_median(Container & c);

    template<class ForwardIterator>
    auto absolute_median(ForwardIterator first, ForwardIterator last);

    template<class Container>
    auto absolute_gini_coefficient(Container & c);

    template<class ForwardIterator>
    auto absolute_gini_coefficient(ForwardIterator first, ForwardIterator last);

    template<class Container>
    auto hoyer_sparsity(Container const & c);

    template<class ForwardIterator>
    auto hoyer_sparsity(ForwardIterator first, ForwardIterator last);

    template<class Container>
    auto shannon_entropy(Container const & c);

    template<class ForwardIterator>
    auto shannon_entropy(ForwardIterator first, ForwardIterator last);

    template<class Container>
    auto shannon_cost(Container const & c);

    template<class ForwardIterator>
    auto shannon_cost(ForwardIterator first, ForwardIterator last);


}}}
``

[heading Description]

The file `boost/math/tools/signal_statistics.hpp` is a set of facilities for computing quantities commonly used in signal analysis.

Our examples use `std::vector<double>` to hold the data, but this not required.
In general, you can store your data in an Eigen array, and Armadillo vector, `std::array`, and for many of the routines, a `std::forward_list`.
These routines are usable in float, double, long double, and Boost.Multiprecision precision, as well as their complex extensions whenever the computation is well-defined.
For certain operations (total variation, for example) integer inputs are supported.

[heading Absolute Median]

The absolute median is used in signal processing, where the median of the magnitude of the coefficients in some expansion are used to estimate noise variance.
See [@https://wavelet-tour.github.io/ Mallat] for details.
The absolute median supports both real and complex arithmetic, modifies its input, and requires random access iterators.

    std::vector<double> v{-1, 1};
    double m = boost::math::tools::absolute_median(v.begin(), v.end());
    // m = 1

[heading Absolute Gini Coefficient]

The Gini coefficient, first used to measure wealth inequality, is also one of the best measures of the sparsity of an expansion in a basis.
A sparse expansion has most of its norm concentrated in just a few coefficients, making the connection with wealth inequality obvious.
However, for measuring sparsity, the phase of the numbers is irrelevant, so we provide the `absolute_gini_coefficient`:

    std::vector<std::complex<double>> v{{0,1}, {0,0}, {0,0}, {0,0}};
    double abs_gini = boost::math::tools::absolute_gini_coefficient(v.begin(), v.end());
    // now abs_gini = 1

    std::vector<std::complex<double>> w{{0,1}, {1,0}, {0,-1}, {-1,0}};
    double abs_gini = boost::math::tools::absolute_gini_coefficient(w.begin(), w.end());
    // now abs_gini = 0

    std::vector<double> u{-1, 1, -1};
    double abs_gini = boost::math::tools::absolute_gini_coefficient(u.begin(), u.end());
    // now abs_gini = 0

Wikipedia calls our scaling a "sample Gini coefficient".
We chose this scaling because it always returns unity for a vector which has only one nonzero coefficient,
whereas the value of the population Gini coefficient of a vector with one non-zero element is dependent on the length of the input.

If sorting the input data is too much expense for a sparsity measure (is it going to be perfect anyway?),
consider calculating the Hoyer sparsity instead.

[heading Hoyer Sparsity]

The Hoyer sparsity measures a normalized ratio of the \u2113[super 1] and \u2113[super 2] norms.
As the name suggests, it is used to measure sparsity in an expansion in some basis.

The Hoyer sparsity computes ([radic]/N/ - \u2113[super 1](v)/\u2113[super 2](v))/([radic]N -1).
For details, see [@https://arxiv.org/pdf/0811.4706.pdf Hurley and Rickard].

Usage:

    std::vector<Real> v{1,0,0};
    Real hs = boost::math::tools::hoyer_sparsity(v);
    // hs = 1
    std::vector<Real> v{1,-1,1};
    Real hs = boost::math::tools::hoyer_sparsity(v.begin(), v.end());
    // hs = 0

The container must be forward iterable and the contents are not modified.
Accepts real, complex, and integer inputs. If the input is an integral type, the output is a double precision float.

[heading Shannon Entropy]

    std::vector<double> v{1/2.0, 1/2.0};
    double Hs = boost::math::tools::shannon_entropy(v.begin(), v.end());
    // Hs = ln(2).

The Shannon entropy only supports non-negative real-valued inputs, presumably for interpretational purposes in the range [0,1]-though this is not enforced.
The natural logarithm is used to compute the Shannon entropy; all other "Shannon entropies" are readily obtained by change of log base.

[heading Shannon Cost]

    std::vector<double> v{-1, 1,-1};
    double Ks = boost::math::tools::shannon_cost(v.begin(), v.end());
    // Ks = 0; concentration of the vector is minimized.

The Shannon cost is a modified version of the Shannon entropy used in signal processing and data compression.
The useful properties of the Shannon cost are /K/[sub /s/](0) = 0 and /K/[sub /s/](/v/\u2295/w/) = /K/[sub /s/](v) + /K/[sub /s/](w).
See [@https://doi.org/10.1007/978-3-642-56702-5 Ripples in Mathematics] for details.


[heading References]

* Higham, Nicholas J. ['Accuracy and stability of numerical algorithms.] Vol. 80. Siam, 2002.
* Mallat, Stephane. ['A wavelet tour of signal processing: the sparse way.] Academic press, 2008.
* Hurley, Niall, and Scott Rickard. ['Comparing measures of sparsity.] IEEE Transactions on Information Theory 55.10 (2009): 4723-4741.
* Jensen, Arne, and Anders la Cour-Harbo. ['Ripples in mathematics: the discrete wavelet transform.] Springer Science & Business Media, 2001.

[endsect]
[/section:signal_statistics Signal Statistics]
