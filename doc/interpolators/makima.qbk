[/
Copyright (c) 2020 Nick Thompson
Use, modification and distribution are subject to the
Boost Software License, Version 1.0. (See accompanying file
LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:makima Modified Akima interpolation]

[heading Synopsis]
``
  #include <boost/math/interpolators/makima.hpp>
``

    namespace boost::math::interpolators {

    template <class RandomAccessContainer>
    class makima
    {
    public:

        using Real = RandomAccessContainer::value_type;

        makima(RandomAccessContainer&& abscissas, RandomAccessContainer&& ordinates);

        Real operator()(Real x) const;

        Real prime(Real x) const;

        friend std::ostream& operator<<(std::ostream & os, const makima & m);
    };

    } // namespaces


[heading Modified Akima Interpolation]

The modified Akima interpolant takes non-equispaced data and interpolates between them via cubic Hermite polynomials whose slopes are chosen by a modification of a geometric construction proposed by [@https://doi.org/10.1145/321607.321609 Akima].
The modification is given by [@https://blogs.mathworks.com/cleve/2019/04/29/makima-piecewise-cubic-interpolation/ Cosmin Ionita] and agrees with Matlab's version.
The interpolant is /C/[super 1] and evaluation has [bigo](log(/N/)) complexity.
This is faster than barycentric rational interpolation, but also less smooth.
An example usage is as follows:

    std::vector<double> x{1, 5, 9 , 12};
    std::vector<double> y{8,17, 4, -3};
    using boost::math::interpolators::makima;
    auto spline = makima(std::move(x), std::move(y));
    // evaluate at a point:
    double z = spline(3.4);
    // evaluate derivative at a point:
    double zprime = spline.prime(3.4);

Periodically, it is helpful to see what data the interpolator has, and the slopes it has chosen.
This can be achieved via

    std::cout << spline << "\n";

Note that the interpolator is pimpl'd, so that copying the class is cheap, and hence it can be shared between threads.
(The call operator and `.prime()` are threadsafe.)

[$../graphs/makima_vs_cubic_b.svg]

The modified Akima spline compared to the cubic /B/-spline.
The modified Akima spline oscillates less than the cubic spline, but has less smoothness and is not exact on quadratic polynomials.


[heading Complexity and Performance]

The call to the constructor requires [bigo](/N/) operations to compute the weighted slopes.
Each call to the interpolant is [bigo](log(/N/)), where /N/ is the number of points to interpolate.

A google benchmark demonstrating the performance of evaluating the spline is given below:

```
Run on (4 X 2700 MHz CPU s)
CPU Caches:
  L1 Data 32K (x2)
  L1 Instruction 32K (x2)
  L2 Unified 262K (x2)
  L3 Unified 3145K (x1)
Load Average: 2.08, 1.83, 1.96
---------------------------------------
Benchmark                          Time
---------------------------------------
BMMakima<double>/8              11.3 ns
BMMakima<double>/16             11.5 ns
BMMakima<double>/32             12.7 ns
BMMakima<double>/64             13.6 ns
BMMakima<double>/128            14.5 ns
BMMakima<double>/256            15.1 ns
BMMakima<double>/512            17.2 ns
BMMakima<double>/1024           18.3 ns
BMMakima<double>/2048           19.6 ns
BMMakima<double>/4096           20.7 ns
BMMakima<double>/8192           22.1 ns
BMMakima<double>/16384          23.1 ns
BMMakima<double>/32768          24.2 ns
BMMakima<double>/65536          25.3 ns
BMMakima<double>/131072         27.1 ns
BMMakima<double>/262144         28.3 ns
BMMakima<double>/524288         29.9 ns
BMMakima<double>/1048576        31.6 ns
BMMakima<double>/2097152        31.8 ns
BMMakima<double>/4194304        33.7 ns
BMMakima<double>/8388608        35.0 ns
BMMakima<double>/16777216       40.0 ns
BMMakima<double>_BigO           1.63 lgN
```


[endsect]
[/section:makima]
