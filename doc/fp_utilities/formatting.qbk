[section:formatting Numeric Formatters (Pretty Printers)]

[heading Synopsis]

   #include <boost/math/tools/formatting.hpp>

   enum output_format_t
   {
      text_format,
      docbook_format,
      latex_format,
      html_format
   };

   template <output_format_t Format = text_format, class charT = char, class Traits = std::char_traits<char> >
   class basic_numeric_printer;

   typedef basic_numeric_printer<> text_printer;
   typedef basic_numeric_printer<docbook_format> docbook_printer;
   typedef basic_numeric_printer<latex_format> latex_printer;
   typedef basic_numeric_printer<html_format> html_printer;

   typedef basic_numeric_printer<text_format, wchar_t> wtext_printer;
   typedef basic_numeric_printer<docbook_format, wchar_t> wdocbook_printer;
   typedef basic_numeric_printer<latex_format, wchar_t> wlatex_printer;
   typedef basic_numeric_printer<html_format, wchar_t> whtml_printer;

[heading Description]

Class `basic_numeric_printer` provides "pretty printing" capabilities for numeric data, it's use mirrors that of the iostream
library, but fullfills a very different role:  there is no "input streaming" and the output is intended to be human readable
and formatted for printing and not for consumption by machine.

Supported input number types are integers, floating point number, complex numbers, rationals(TODO), polynomials, intervals(TODO)
and containers thereof(TODO).  Other types, plus all the standard library manipulators can also be streamed to `basic_numeric_printer`
but are simply formwarded to the underlying stream and ignored by the pretty printer.

Output formats include plain text (including formatted output to console), Docbook XML markup, HTML markup, and Latex.  MathML may come later(TODO).

Integer values have the same representation as the underlying stream would give them, but can have styling applied to their XML wrapper
in HTML and Docbook output modes.

Floats in scientific mode, are styled somewhat differently from the underlying iostream: '''<phrase role="number">-1.23457&#x00D7;10<superscript>-24</superscript></phrase>'''
and can be customised to change the default multipication operator: '''<phrase role="number">-1.235&#x22C5;10<superscript>-24</superscript></phrase>'''.

Complex numbers inherit all the properties of floats, and in addition allow the unit "i" to be customised, for example 
'''<phrase role="number">1.23 - 1.23&#x00D7;10<superscript>-24</superscript><phrase role="imaginary_i">i</phrase></phrase>''' or
'''<phrase role="number"><phrase role="complex">1.23 - 1.2345678765&#x22C5;10<superscript>-24</superscript><phrase role="imaginary_i">&#x2148;</phrase></phrase></phrase>'''.

Polynomials can be polynomials of integers, floats, or complex numbers and inherit all the properties of each of those:
'''<phrase role="number"><phrase role="polynomial"><phrase role="number"><phrase role="complex">(2.4 + 3.25<phrase role="imaginary_i">i</phrase>)</phrase></phrase> - <phrase role="number"><phrase role="complex">34.25</phrase></phrase><emphasis>x</emphasis> + <phrase role="number"><phrase role="complex">4.2&#x00D7;10<superscript>-06</superscript><phrase role="imaginary_i">i</phrase></phrase></phrase><emphasis>x</emphasis><superscript>2</superscript> - <phrase role="number"><phrase role="complex">(5.34&#x00D7;10<superscript>-67</superscript> - 4.65&#x00D7;10<superscript>-20</superscript><phrase role="imaginary_i">i</phrase>)</phrase></phrase><emphasis>x</emphasis><superscript>3</superscript></phrase></phrase>'''.

[import ../../example/formatter_snips.cpp]

[formatting_eg1]

[formatting_eg2]

[formatting_eg3]
 
Here's the revised result:

[$../images/polynomial_latex_2.svg]


[h4 Examples:]

[heading Class `basic_numeric_printer`]

   enum output_format_t
   {
      text_format,
      docbook_format,
      latex_format,
      html_format
   };

   template <output_format_t Format = text_format, class charT = char, class Traits = std::char_traits<char> >
   class basic_numeric_printer
   {
      basic_numeric_printer(std::basic_ostream<charT, Traits>& os);
      std::basic_ostream<charT, Traits>& stream();
   };

   template <output_format_t Format, class charT, class Traits, class Unspecified>
   basic_numeric_printer<Format, charT, Traits>& operator << (basic_numeric_printer<Format, charT, Traits>& os, const Unspecified& data);

   typedef basic_numeric_printer<> text_printer;
   typedef basic_numeric_printer<docbook_format> docbook_printer;
   typedef basic_numeric_printer<latex_format> latex_printer;
   typedef basic_numeric_printer<html_format> html_printer;

   typedef basic_numeric_printer<text_format, wchar_t> wtext_printer;
   typedef basic_numeric_printer<docbook_format, wchar_t> wdocbook_printer;
   typedef basic_numeric_printer<latex_format, wchar_t> wlatex_printer;
   typedef basic_numeric_printer<html_format, wchar_t> whtml_printer;

Class `basic_numeric_printer` is a `std::basic_ostream` lookalike which is constructable from an underlying
stream, and has a single public member function which returns a reference to the underlying stream.

It's usage via `<<` manipulators is identical to that of `std::basic_ostream`: anything that `basic_numeric_printer` doesn't
understand is passed unchanged to the underlying stream, while numeric data alone is intercepted and pretty-formtted.

[heading Manipulators]

There are some stream manipulators which are specific to `basic_numeric_printer` and control how the "pretty printing" is conduced:

   enum styling_level_t
   {
      no_styling = 0,
      minimal_styling = 1,
      full_styling = 6
   };

Controls the level of styling applied to XML based output formats.

[variablelist
    [[no_styling] [As it's name suggests, results in no styling applied to the output.]]
    [[minimal_styling] [Adds minimal styling to the output: for Docbook this wraps the number in `<phrase role="number">...</phrase>`
    and for HTML it adds `<span class="number">...</span>` around each number.]]
    [[full_styling] [This is the default.  It adds styling around each complete number, plus styling to indicate the type of number, and styling
    around some individual components.  In HTML, an integer would be formatted as `<span class="number"><span class="integer">-23</span></span>`,
    the inner class name changes to "float" or "complex" depending on the number type, and the XML container to `<phrase>` in Docbook.  In addition
    complex numbers get the "i" wrapped in `<span class="imaginary_i">...</span>`.]]
]

   enum multiplyer_t
   {
      multiply_times = 0,
      multiply_dot = 1,
      multiply_x = 2
   };

Controls the character used for the multiplication symbol:

[variablelist
    [[multiply_times] [The default.  Uses the character U+x00D7 (or [^$\times\$] in Latex): \u00D7.]]
    [[multiply_dot] [Uses the character U+x22C5 (or [^$\cdot\$] in Latex): \u22C5.]]
    [[multiply_x] [Uses a literal `x` character, this is generally not such a good choice, but is the only one available for plain text output.]]
]

   enum imaginary_i_t
   {
      upright_i = 0,
      slanted_i = 1,
      doublestruck_i = 2
   };

Controls how the imaginary unit is formatted (plain text output ignores this option):

[variablelist
    [[upright_i] [The default.  Formats "i" as a regular upright character, this matches "ISO 80000-2:2009, Quantities and units---part2: Mathematical signs and symbols to be used in the natural sciences and technology".]]
    [[slanted_i] [Uses an italic character ['"i"], this style has strong historical precedent.]]
    [[doublestruck_i] [Uses the double struct letter i: \u2148.  This is the form used by Mathematica.  This is not available in Latex output.]]
]

   constexpr const unspecified latex_as_equation;
   constexpr const unspecified latex_as_text;

Controls how latex output is handled: the default is to format all numbers in equation mode, but streaming `latex_as_text` to the stream
will result in numbers being formatted in text mode instead.  Note that even in text mode some entities need to drop into math mode temporarily
for example to access symbols such as `\times`.

[heading Format Gallery]

The following section (using Docbook output format) illustrates how each of the number categories are formatted with various options:

[import ../../example/formatter_docbook_output.qbk]

[integer_formatting_examples]

[float_formatting_examples]

[complex_formatting_examples]

[polynomial_formatting_examples]

[heading Output Format Gallery]

The above tables of sample output are available in various other formats

[@../../example/formatter_html_output.html HTML sample page], generated with [@../../example/formatter_html_output.cpp formatter_html_output.cpp].

[@../../example/formatter_text_output.txt Plain text sample page], generated with [@../../example/formatter_text_output.cpp formatter_text_output.cpp].

[@../../example/formatter_latex_output.tex Latex source output], generated with [@../../example/formatter_latex_output.cpp formatter_latex_output.cpp].

[@../../example/formatter_latex_output.pdf Latex PDF output], generated with [@../../example/formatter_latex_output.cpp formatter_latex_output.cpp] and then converted to PDF.

[endsect] [/section:formatting]


[/  Copyright 2017 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]